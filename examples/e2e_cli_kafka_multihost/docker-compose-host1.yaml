# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

services:
  zookeeper0:
    container_name: zookeeper0
    restart: always
    image: hyperledger/fabric-zookeeper:x86_64-1.0.3
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=0.0.0.0:2888:3888 server.2=zookeeper1:2889:3889 server.3=zookeeper2:2890:3890
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    extra_hosts:
      - "zookeeper0:$HOST1_IP"
      - "zookeeper1:$HOST2_IP"
      - "zookeeper2:$HOST2_IP"

  kafka0:
    image: hyperledger/fabric-kafka:x86_64-1.0.3
    container_name: kafka0
    restart: always
    environment:
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_BROKER_ID=0
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka0:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2182,zookeeper2:2183
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
      - 9092:9092
    # volumes:
      # - ../data/kafka0/logs:/opt/kafka/logs
      # - ../data/kafka0/kafka-logs:/tmp/kafka-logs
    extra_hosts:
      - "zookeeper0:$HOST1_IP"
      - "zookeeper1:$HOST2_IP"
      - "zookeeper2:$HOST2_IP"
      - "kafka0:$HOST1_IP"
      - "kafka1:$HOST1_IP"
      - "kafka2:$HOST2_IP"
      - "kafka3:$HOST2_IP"

  kafka1:
    image: hyperledger/fabric-kafka:x86_64-1.0.3
    container_name: kafka1
    restart: always
    environment:
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9093
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2182,zookeeper2:2183
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
      - 9093:9093
    # volumes:
      # - ../data/kafka1/logs:/opt/kafka/logs
      # - ../data/kafka1/kafka-logs:/tmp/kafka-logs
    extra_hosts:
      - "zookeeper0:$HOST1_IP"
      - "zookeeper1:$HOST2_IP"
      - "zookeeper2:$HOST2_IP"
      - "kafka0:$HOST1_IP"
      - "kafka1:$HOST1_IP"
      - "kafka2:$HOST2_IP"
      - "kafka3:$HOST2_IP"

  orderer0.example.com:
    extends:
      file: base/docker-compose-base.yaml
      service: orderer.example.com
    container_name: orderer0.example.com
    # 当前目录
    volumes:
      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls
    ports:
      - 7050:7050
    extra_hosts:
      - "kafka0:$HOST1_IP"
      - "kafka1:$HOST1_IP"
      - "kafka2:$HOST2_IP"
      - "kafka3:$HOST2_IP"

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.org1.example.com
    extra_hosts:
      - "orderer1.example.com:$HOST2_IP"

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.org1.example.com
    extra_hosts:
      - "orderer1.example.com:$HOST2_IP" # 127

  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    # command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'
    volumes:
        - /var/run/:/host/var/run/
        - ../chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    extra_hosts:
      - "peer0.org2.example.com:$HOST2_IP"
      - "peer1.org2.example.com:$HOST2_IP"
      # 和 cli 在同一台 host 可以不用 extra_hosts，此时要用 docker 网络内部的端口；用的话在容器 network 里要能解析成 host 的 ip
      # - "peer0.org1.example.com:$HOST1_IP"
      # - "peer1.org1.example.com:$HOST1_IP"
      # - "orderer0.example.com:$HOST1_IP"
      - "orderer1.example.com:$HOST2_IP"